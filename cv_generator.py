#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
G√©n√©rateur de CV PDF professionnel pour Samba SY
Inclut photo de profil et QR code vers le portfolio
"""

from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import cm, inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
from reportlab.pdfgen import canvas
from reportlab.graphics.shapes import Drawing, Rect
import qrcode
from PIL import Image as PILImage
import os
import io

class CVGenerator:
    def __init__(self):
        self.width, self.height = A4
        self.margin = 2*cm
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
        
    def setup_custom_styles(self):
        """Configuration des styles personnalis√©s avec couleurs IA du portfolio"""
        # Style pour le nom avec gradient IA
        self.styles.add(ParagraphStyle(
            name='CVName',
            parent=self.styles['Heading1'],
            fontSize=26,
            textColor=colors.HexColor('#4f46e5'),
            spaceAfter=8,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Style pour le titre professionnel
        self.styles.add(ParagraphStyle(
            name='CVTitle',
            parent=self.styles['Normal'],
            fontSize=16,
            textColor=colors.HexColor('#06b6d4'),
            spaceAfter=15,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Style pour les sections avec couleurs IA
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=18,
            textColor=colors.HexColor('#6366f1'),
            spaceAfter=10,
            spaceBefore=18,
            fontName='Helvetica-Bold',
            borderWidth=2,
            borderColor=colors.HexColor('#8b5cf6'),
            borderPadding=6
        ))
        
        # Style pour le contenu
        self.styles.add(ParagraphStyle(
            name='Content',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.black,
            spaceAfter=6,
            alignment=TA_JUSTIFY,
            fontName='Helvetica'
        ))
        
        # Style pour les sous-titres
        self.styles.add(ParagraphStyle(
            name='SubTitle',
            parent=self.styles['Normal'],
            fontSize=13,
            textColor=colors.HexColor('#7c3aed'),
            spaceAfter=6,
            fontName='Helvetica-Bold'
        ))

    def generate_qr_code(self, url, size=(2*cm, 2*cm)):
        """G√©n√®re un QR code pour l'URL du portfolio"""
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(url)
        qr.make(fit=True)
        
        # Cr√©er l'image QR
        qr_img = qr.make_image(fill_color="black", back_color="white")
        
        # Sauvegarder temporairement
        qr_path = "temp_qr.png"
        qr_img.save(qr_path)
        
        return qr_path

    def create_header(self, canvas, doc):
        """Cr√©e l'en-t√™te avec photo et informations de contact"""
        canvas.saveState()
        
        # Ligne de s√©paration en haut
        canvas.setStrokeColor(colors.HexColor('#2a5298'))
        canvas.setLineWidth(3)
        canvas.line(self.margin, self.height - self.margin, 
                   self.width - self.margin, self.height - self.margin)
        
        canvas.restoreState()

    def create_cv_content(self):
        """Cr√©e le contenu principal du CV"""
        story = []
        
        # En-t√™te avec photo et nom
        header_data = []
        
        # V√©rifier si l'image existe
        photo_path = "image.jpg"
        if os.path.exists(photo_path):
            try:
                # Redimensionner la photo
                photo = Image(photo_path, width=3*cm, height=3*cm)
            except:
                photo = Paragraph("Photo non disponible", self.styles['Content'])
        else:
            photo = Paragraph("Photo non disponible", self.styles['Content'])
        
        # Informations personnelles
        contact_info = [
            Paragraph("<b>SAMBA SY</b>", self.styles['CVName']),
            Paragraph("DATA SCIENTIST | CLOUD & DEVOPS | D√âVELOPPEUR IA", self.styles['CVTitle']),
            Spacer(1, 0.3*cm),
            Paragraph("<b>Contact:</b>", self.styles['SubTitle']),
            Paragraph("üìû +221 773784814", self.styles['Content']),
            Paragraph("‚úâÔ∏è sambasy837@gmail.com", self.styles['Content']),
            Paragraph("üìç Dakar, S√©n√©gal", self.styles['Content']),
        ]
        
        # QR Code
        qr_path = self.generate_qr_code("https://sambasy.teranganumerique.com/")
        qr_code = Image(qr_path, width=2.5*cm, height=2.5*cm)
        
        # Table pour l'en-t√™te
        header_table = Table([
            [photo, contact_info, qr_code]
        ], colWidths=[4*cm, 10*cm, 3*cm])
        
        header_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        story.append(header_table)
        story.append(Spacer(1, 0.5*cm))
        
        # Ligne de s√©paration
        story.append(Paragraph('<para borderWidth="1" borderColor="#2a5298"><br/></para>', self.styles['Content']))
        
        # R√©sum√© professionnel
        story.append(Paragraph("R√âSUM√â PROFESSIONNEL", self.styles['SectionHeader']))
        story.append(Paragraph(
            "Data Scientist passionn√© par l'Intelligence Artificielle et expert en solutions cloud innovantes. "
            "Sp√©cialis√© en Machine Learning, Deep Learning, NLP et Computer Vision avec une expertise avanc√©e en AWS Cloud et DevOps. "
            "Cr√©ateur d'applications IA r√©volutionnaires incluant des syst√®mes de d√©tection de fake news, pr√©diction m√©dicale et dashboards interactifs. "
            "Ma√Ætrise compl√®te de Python, R, TensorFlow, Docker/Kubernetes et d√©veloppement Full Stack pour transformer les donn√©es en valeur business.",
            self.styles['Content']
        ))
        story.append(Spacer(1, 0.3*cm))
        
        # Exp√©rience professionnelle
        story.append(Paragraph("EXP√âRIENCE PROFESSIONNELLE", self.styles['SectionHeader']))
        
        experiences = [
            {
                "poste": "Data Scientist & D√©veloppeur IA",
                "entreprise": "Porokhane Digital Consulting",
                "periode": "2023 - Pr√©sent",
                "description": [
                    "‚Ä¢ D√©veloppement d'un syst√®me IA de d√©tection de fake news (NLP avanc√©, d√©ploy√© sur Azure)",
                    "‚Ä¢ Cr√©ation de mod√®les pr√©dictifs m√©dicaux (diab√®te) avec 92% de pr√©cision",
                    "‚Ä¢ Architecture et d√©ploiement de solutions cloud AWS (EC2, S3, Lambda, RDS)",
                    "‚Ä¢ D√©veloppement Full Stack de plateformes digitales (React, Django, PostgreSQL)"
                ]
            },
            {
                "poste": "Analyste de Donn√©es",
                "entreprise": "A√©roport International Blaise Diagne",
                "periode": "2022 - 2023",
                "description": [
                    "‚Ä¢ Analyse des flux de passagers et optimisation des op√©rations",
                    "‚Ä¢ Cr√©ation de tableaux de bord avec Power BI et Tableau",
                    "‚Ä¢ D√©veloppement de scripts d'automatisation en Python",
                    "‚Ä¢ Gestion de bases de donn√©es SQL Server et Oracle"
                ]
            },
            {
                "poste": "D√©veloppeur Web Junior",
                "entreprise": "Webgram Agency",
                "periode": "2021 - 2022",
                "description": [
                    "‚Ä¢ D√©veloppement d'applications web avec PHP/MySQL",
                    "‚Ä¢ Int√©gration de designs responsive (HTML5, CSS3, JavaScript)",
                    "‚Ä¢ Optimisation SEO et performance des sites web",
                    "‚Ä¢ Maintenance et mise √† jour de sites e-commerce"
                ]
            }
        ]
        
        for exp in experiences:
            story.append(Paragraph(f"<b>{exp['poste']}</b>", self.styles['SubTitle']))
            story.append(Paragraph(f"{exp['entreprise']} | {exp['periode']}", self.styles['Content']))
            for desc in exp['description']:
                story.append(Paragraph(desc, self.styles['Content']))
            story.append(Spacer(1, 0.2*cm))
        
        # Formation
        story.append(Paragraph("FORMATION", self.styles['SectionHeader']))
        
        formations = [
            {
                "diplome": "Master en Intelligence Artificielle et Big Data",
                "etablissement": "Universit√© Cheikh Anta Diop de Dakar",
                "periode": "2024 - 2025",
                "description": "Expertise avanc√©e en analyse de donn√©es massives, mod√®les pr√©dictifs, apprentissage automatique et traitement du langage naturel."
            },
            {
                "diplome": "Licence en Technicien Informatique",
                "etablissement": "Universit√© Cheikh Anta Diop de Dakar",
                "periode": "2021 - 2022",
                "description": "Ma√Ætrise des concepts en programmation informatique, mod√©lisation math√©matique et d√©veloppement logiciel."
            },
            {
                "diplome": "Baccalaur√©at Scientifique",
                "etablissement": "Lyc√©e de Thi√®s",
                "periode": "2017",
                "description": "Sp√©cialisation en math√©matiques et sciences physiques."
            }
        ]
        
        for formation in formations:
            story.append(Paragraph(f"<b>{formation['diplome']}</b>", self.styles['SubTitle']))
            story.append(Paragraph(f"{formation['etablissement']} | {formation['periode']}", self.styles['Content']))
            story.append(Paragraph(formation['description'], self.styles['Content']))
            story.append(Spacer(1, 0.2*cm))
        
        # Comp√©tences techniques
        story.append(Paragraph("COMP√âTENCES TECHNIQUES", self.styles['SectionHeader']))
        
        competences_data = [
            ["Intelligence Artificielle", "Python, TensorFlow, PyTorch, Scikit-learn, OpenCV, NLP, Computer Vision"],
            ["Cloud & DevOps", "AWS (EC2, S3, Lambda, RDS), Azure, Docker, Kubernetes, Terraform, CI/CD"],
            ["Data Science & Analytics", "Machine Learning, Deep Learning, R, Pandas, NumPy, Matplotlib, Seaborn"],
            ["D√©veloppement Full Stack", "React, Django, Node.js, PHP, HTML5, CSS3, JavaScript, Bootstrap"],
            ["Bases de Donn√©es", "PostgreSQL, MySQL, MongoDB, SQL Server, Oracle, Redis"],
            ["Visualisation & BI", "Power BI, Tableau, Streamlit, Plotly, D3.js, Excel Avanc√©"]
        ]
        
        competences_table = Table(competences_data, colWidths=[4*cm, 11*cm])
        competences_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f8ff')),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#4f46e5')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#8b5cf6')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        story.append(competences_table)
        story.append(Spacer(1, 0.3*cm))
        
        # Certifications
        story.append(Paragraph("CERTIFICATIONS", self.styles['SectionHeader']))
        
        certifications = [
            "‚Ä¢ AWS Certified Solutions Architect - Associate (2024)",
            "‚Ä¢ Google Cloud Professional Data Engineer (2024)",
            "‚Ä¢ Microsoft Azure AI Fundamentals (2023)",
            "‚Ä¢ TensorFlow Developer Certificate (2023)",
            "‚Ä¢ Certified Kubernetes Administrator (CKA) (2024)",
            "‚Ä¢ Oracle Database SQL Certified Associate (2023)"
        ]
        
        for cert in certifications:
            story.append(Paragraph(cert, self.styles['Content']))
        
        story.append(Spacer(1, 0.3*cm))
        
        # Langues
        story.append(Paragraph("LANGUES", self.styles['SectionHeader']))
        
        langues_data = [
            ["Fran√ßais", "Natif"],
            ["Anglais", "Professionnel (B2)"],
            ["Wolof", "Natif"],
            ["Arabe", "Notions de base"]
        ]
        
        langues_table = Table(langues_data, colWidths=[6*cm, 6*cm])
        langues_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#8b5cf6')),
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f8ff')),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#4f46e5')),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('TOPPADDING', (0, 0), (-1, -1), 4),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        
        story.append(langues_table)
        
        # Pied de page avec QR code info
        story.append(Spacer(1, 0.5*cm))
        story.append(Paragraph(
            '<para alignment="center" fontSize="9" textColor="#666666">'
            'Scannez le QR code ci-dessus pour acc√©der √† mon portfolio en ligne : '
            '<b>https://sambasy.teranganumerique.com/</b>'
            '</para>',
            self.styles['Content']
        ))
        
        return story

    def generate_cv(self, filename="CV_Samba_SY_IA_Portfolio.pdf"):
        """G√©n√®re le CV PDF complet"""
        doc = SimpleDocTemplate(
            filename,
            pagesize=A4,
            rightMargin=self.margin,
            leftMargin=self.margin,
            topMargin=self.margin + 1*cm,
            bottomMargin=self.margin
        )
        
        # Cr√©er le contenu
        story = self.create_cv_content()
        
        # Construire le PDF
        doc.build(story, onFirstPage=self.create_header, onLaterPages=self.create_header)
        
        # Nettoyer les fichiers temporaires
        if os.path.exists("temp_qr.png"):
            os.remove("temp_qr.png")
        
        print(f"CV g√©n√©r√© avec succ√®s : {filename}")
        return filename

if __name__ == "__main__":
    # Cr√©er le g√©n√©rateur de CV
    cv_gen = CVGenerator()
    
    # G√©n√©rer le CV
    cv_filename = cv_gen.generate_cv()
    
    print(f"CV PDF cree : {cv_filename}")
    print("Le CV inclut :")
    print("   - Photo de profil (image.jpg)")
    print("   - QR code vers le portfolio")
    print("   - Informations completes de Samba SY")
    print("   - Design professionnel moderne")
